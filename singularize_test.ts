import { assertStrictEquals } from "https://deno.land/std@0.74.0/testing/asserts.ts";
import singularize from "./singularize.ts";

Deno.test("singularize passes same test cases as ActiveSupport::Inflector#singularize", function () {
  assertStrictEquals(singularize("searches"), "search");
  assertStrictEquals(singularize("switches"), "switch");
  assertStrictEquals(singularize("fixes"), "fix");
  assertStrictEquals(singularize("boxes"), "box");
  assertStrictEquals(singularize("processes"), "process");
  assertStrictEquals(singularize("addresses"), "address");
  assertStrictEquals(singularize("cases"), "case");
  assertStrictEquals(singularize("stacks"), "stack");
  assertStrictEquals(singularize("wishes"), "wish");
  assertStrictEquals(singularize("fish"), "fish");
  assertStrictEquals(singularize("jeans"), "jeans");
  assertStrictEquals(singularize("funky jeans"), "funky jeans");
  assertStrictEquals(singularize("my money"), "my money");
  assertStrictEquals(singularize("categories"), "category");
  assertStrictEquals(singularize("queries"), "query");
  assertStrictEquals(singularize("abilities"), "ability");
  assertStrictEquals(singularize("agencies"), "agency");
  assertStrictEquals(singularize("movies"), "movie");
  assertStrictEquals(singularize("archives"), "archive");
  assertStrictEquals(singularize("indices"), "index");
  assertStrictEquals(singularize("wives"), "wife");
  assertStrictEquals(singularize("saves"), "safe");
  assertStrictEquals(singularize("halves"), "half");
  assertStrictEquals(singularize("moves"), "move");
  assertStrictEquals(singularize("salespeople"), "salesperson");
  assertStrictEquals(singularize("people"), "person");
  assertStrictEquals(singularize("spokesmen"), "spokesman");
  assertStrictEquals(singularize("men"), "man");
  assertStrictEquals(singularize("women"), "woman");
  assertStrictEquals(singularize("bases"), "basis");
  assertStrictEquals(singularize("diagnoses"), "diagnosis");
  assertStrictEquals(singularize("diagnosis_as"), "diagnosis_a");
  assertStrictEquals(singularize("data"), "datum");
  assertStrictEquals(singularize("media"), "medium");
  assertStrictEquals(singularize("stadia"), "stadium");
  assertStrictEquals(singularize("analyses"), "analysis");
  assertStrictEquals(singularize("my_analyses"), "my_analysis");
  assertStrictEquals(singularize("node_children"), "node_child");
  assertStrictEquals(singularize("children"), "child");
  assertStrictEquals(singularize("experiences"), "experience");
  assertStrictEquals(singularize("days"), "day");
  assertStrictEquals(singularize("comments"), "comment");
  assertStrictEquals(singularize("foobars"), "foobar");
  assertStrictEquals(singularize("newsletters"), "newsletter");
  assertStrictEquals(singularize("old_news"), "old_news");
  assertStrictEquals(singularize("news"), "news");
  assertStrictEquals(singularize("series"), "series");
  assertStrictEquals(singularize("miniseries"), "miniseries");
  assertStrictEquals(singularize("species"), "species");
  assertStrictEquals(singularize("quizzes"), "quiz");
  assertStrictEquals(singularize("perspectives"), "perspective");
  assertStrictEquals(singularize("oxen"), "ox");
  assertStrictEquals(singularize("photos"), "photo");
  assertStrictEquals(singularize("buffaloes"), "buffalo");
  assertStrictEquals(singularize("tomatoes"), "tomato");
  assertStrictEquals(singularize("dwarves"), "dwarf");
  assertStrictEquals(singularize("elves"), "elf");
  assertStrictEquals(singularize("information"), "information");
  assertStrictEquals(singularize("equipment"), "equipment");
  assertStrictEquals(singularize("buses"), "bus");
  assertStrictEquals(singularize("statuses"), "status");
  assertStrictEquals(singularize("status_codes"), "status_code");
  assertStrictEquals(singularize("mice"), "mouse");
  assertStrictEquals(singularize("lice"), "louse");
  assertStrictEquals(singularize("houses"), "house");
  assertStrictEquals(singularize("octopi"), "octopus");
  assertStrictEquals(singularize("viri"), "virus");
  assertStrictEquals(singularize("aliases"), "alias");
  assertStrictEquals(singularize("portfolios"), "portfolio");
  assertStrictEquals(singularize("vertices"), "vertex");
  assertStrictEquals(singularize("matrices"), "matrix");
  assertStrictEquals(singularize("matrix_fus"), "matrix_fu");
  assertStrictEquals(singularize("axes"), "axis");
  assertStrictEquals(singularize("taxis"), "taxi");
  assertStrictEquals(singularize("testes"), "testis");
  assertStrictEquals(singularize("crises"), "crisis");
  assertStrictEquals(singularize("rice"), "rice");
  assertStrictEquals(singularize("shoes"), "shoe");
  assertStrictEquals(singularize("horses"), "horse");
  assertStrictEquals(singularize("prizes"), "prize");
  assertStrictEquals(singularize("edges"), "edge");
  assertStrictEquals(singularize("databases"), "database");
  assertStrictEquals(singularize("|ices"), "|ice");
  assertStrictEquals(singularize("|ouses"), "|ouse");
  assertStrictEquals(singularize("slices"), "slice");
  assertStrictEquals(singularize("police"), "police");
});
